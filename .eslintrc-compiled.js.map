{"version":3,"sources":[".eslintrc.js"],"names":[],"mappings":";;AAAA;;AAEA,OAAO,OAAP,GAAiB;AACb;AACA;AACA;AACA,YAAQ,IAJK;AAKb;AACA;AACA,eAAY;AACR,kBAAS,IADD;AAER,oBAAW,IAFH;AAGR,aAAI;AAHI,KAPC;AAYb;AACA;AACA;AACA;AACA;AACA,qBAAiB;AACb,uBAAe,CADF;AAEb,sBAAc,QAFD;AAGb,wBAAgB;AACZ,mBAAO;AADK;AAHH,KAjBJ;AA6Bb;AACA,aAAU;AACN;AACA,sBAAa,CAFP;AAGN;AACA,gBAAO,CAAC,CAAD,EAAG,OAAH,CAJD;AAKN;AACA,wBAAe;AANT,KA9BG;AAsCb;AACA,WAAO;AACH,mBAAW,IADR;AAEH,gBAAQ;AAFL,KAvCM;AA2Cb,cAAU;AA3CG,CAAjB","file":".eslintrc-compiled.js","sourcesContent":["// eslint的语法规则\r\n\r\nmodule.exports = {\r\n    // 开启推荐配置信息\r\n    // \"extends\": \"eslint:recommended\",\r\n    // 默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 \"root\": true。ESLint 一旦发现配置文件中有 \"root\": true，它就会停止在父级目录中寻找。\r\n    \"root\": true,\r\n    // 脚本在执行期间访问的额外的全局变量\r\n    // 当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。\r\n    \"globals\" : {\r\n        \"window\":true,\r\n        \"document\":true,\r\n        \"$\":true\r\n    },\r\n    // 设置插件\r\n    // \"plugins\": [\r\n    //     'html'\r\n    // ],\r\n    // 设置解析器选项（必须设置这个属性）\r\n    \"parserOptions\": {\r\n        \"ecmaVersion\": 7,\r\n        \"sourceType\": \"module\",\r\n        \"ecmaFeatures\": {\r\n            \"jsx\": true,\r\n            // \"arrowFunctions\": true,\r\n            // \"experimentalObjectRestSpread\": true,\r\n            // \"classes\": true,\r\n            // \"modules\": true,\r\n            // \"defaultParams\": true\r\n        }\r\n    },\r\n    // 启用的规则及各自的错误级别\r\n    \"rules\" : {\r\n        // 禁止用console\r\n        \"no-console\":0,\r\n        // 禁止用分号\r\n        \"semi\":[2,'never'],\r\n        // 在同一个作用域中禁止多次重复定义\r\n        \"no-redeclare\":1\r\n    },\r\n    // 指定你想启用的环境\r\n    \"env\": {\r\n        \"browser\": true,\r\n        \"node\": true\r\n    },\r\n    \"parser\": \"babel-eslint\"\r\n};"]}