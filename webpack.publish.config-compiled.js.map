{"version":3,"sources":["webpack.publish.config.js"],"names":[],"mappings":";;AAAA;;;AAGA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAY,QAAQ,SAAR,CAAhB;AACA,IAAI,oBAAsB,QAAQ,qBAAR,CAA1B;AACA,IAAI,eAAoB,QAAQ,cAAR,CAAxB;AACA,IAAI,WAAoB,QAAQ,UAAR,CAAxB;AACA,IAAI,oBAAoB,QAAQ,6BAAR,CAAxB;AACA;AACA,IAAI,oBAAoB,QAAQ,6BAAR,CAAxB;;AAEA,OAAO,OAAP,GAAiB;AACb,WAAQ;AACJ,gBAAQ,CAAC,iBAAD;AADJ,KADK;AAIb,YAAQ;AACJ,cAAW,QADP;AAEJ,kBAAW,cAFP;AAGJ,oBAAY,GAHR;AAIJ,uBAAe;AAJX,KAJK;AAUb,eAAW;AACP,4BAAoB,IADb;AAEP,aAAK,IAFE;AAGP,eAAO,EAAE,QAAQ,IAAV,EAHA;AAIP,eAAO;AACH,0BAAc;AACV,wBAAQ,0BADE;AAEV,wBAAQ,KAFE;AAGV,8BAAc;AAHJ;AADX;AAJA,KAVE;AAsBb,YAAQ;AACJ,oBAAY;AADR,KAtBK;AAyBb,YAAQ;AACJ,iBAAS,CACL;AACI,kBAAM,SADV;AAEI,oBAAQ;AAFZ,SADK,EAML;AACI,kBAAM,SADV;AAEI,oBAAQ;AAFZ,SANK,EAUL;AACI,kBAAM,uBADV;AAEI,oBAAQ;AAFZ,SAVK,EAcL;AACI,kBAAM,6BADV;AAEI,oBAAQ;AAFZ,SAdK,EAkBL,EAAE,MAAM,QAAR,EAAkB,QAAS,kBAAkB,OAAlB,CAA0B,cAA1B,EAAyC,2BAAzC,CAA3B,EAlBK;AADL,KAzBK;AAgDb,aAAS;AACL,oBAAY,CAAC,EAAD,EAAK,KAAL,EAAY,OAAZ,EAAqB,OAArB,EAA8B,MAA9B;AADP,KAhDI;AAmDb,aAAS,CACL,IAAI,iBAAJ,CAAsB,EAAC,KAAK,wBAAN,EAAgC,SAAS,QAAzC,EAAtB,CADK,EAEL,IAAI,iBAAJ,CAAsB;AAClB,kBAAS,YADS,EACW;AAC7B,kBAAS,kBAFS,EAEkB;AACpC,gBAAO,IAHW,EAGkB;AACpC,cAAK,IAJa,EAIkB;AACpC,gBAAO,EAA6B;AAChC,4BAAe,IADZ,EAC6B;AAChC,gCAAmB,KAFhB,EAE8B;AACjC,uCAA0B,IAHvB,EAG8B;AACjC,6BAAgB,IAJb,EAI6B;AAChC,mCAAsB,IALnB,EAK6B;AAChC,2CAA8B,IAN3B,EAMqC;AACxC,8BAAiB,IAPd,EAO6B;AAChC,sBAAS,IARN,EAQ6B;AAChC,uBAAU,IATP,EAS6B;AAChC,wBAAW,IAVR,CAU6B;AAV7B;AALW,KAAtB,CAFK;AAoBL;AACA,QAAI,QAAQ,QAAR,CAAiB,kBAArB,CAAwC;AACpC,cAAM,OAD8B;AAEpC,kBAAU,IAF0B;AAGpC,mBAAU,CAH0B;AAIpC,eAAM;AAJ8B,KAAxC,CArBK,EA2BL,IAAI,QAAQ,YAAZ,CAAyB;AACrB,uBAAe;AACX,sBAAU,KAAK,SAAL,CAAe,QAAQ,GAAR,CAAY,QAAZ,IAAwB,YAAvC,CADC,CACoD;AADpD;AADM,KAAzB,CA3BK,EAgCL,IAAI,iBAAJ,CAAsB,mBAAtB,CAhCK,CAnDI;AAqFb,aAAU,CAAC,YAAD,EAAe,QAAf;;AArFG,CAAjB","file":"webpack.publish.config-compiled.js","sourcesContent":["/**\r\n * 项目开发环境配置文件\r\n */\r\nvar path = require('path')\r\nvar webpack   = require('webpack')\r\nvar\tHtmlWebpackPlugin   = require('html-webpack-plugin')\r\nvar\tautoprefixer      = require('autoprefixer')\r\nvar\tcsswring          = require('csswring')\r\nvar\tExtractTextPlugin = require('extract-text-webpack-plugin')\r\n// 自动打开浏览器插件\r\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    entry : {\r\n        bundle: ['./src/js/app.js']\r\n    },\r\n    output: {\r\n        path:      './dist',\r\n        filename:  'js/[name].js',\r\n        publicPath: '/',\r\n        chunkFilename: 'chunk/[id].chunk.js',\r\n    },\r\n    devServer: {\r\n        historyApiFallback: true,\r\n        hot: true,\r\n        stats: { colors: true },\r\n        proxy: {\r\n            '/lianzi/**': {\r\n                target: 'https://lz.lianziapp.com',\r\n                secure: false,\r\n                changeOrigin: true\r\n            }\r\n        }\r\n    },\r\n    eslint: {\r\n        configFile: '.eslintrc.js'\r\n    },\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.jsx?$/,\r\n                loader: 'babel',\r\n            },\r\n\r\n            {\r\n                test: /\\.scss$/,\r\n                loader: 'style!css!sass'\r\n            },\r\n            {\r\n                test: /\\.(png|jpg|jpeg|gif)$/,\r\n                loader: 'url'\r\n            },\r\n            {\r\n                test: /\\.(eot|woff|ttf|woff2|svg)$/,\r\n                loader: 'url'\r\n            },\r\n            { test: /\\.css$/, loader : ExtractTextPlugin.extract('style-loader','css-loader!postcss-loader') }\r\n\r\n        ]\r\n    },\r\n    resolve: {\r\n        extensions: ['', '.js', '.json', '.scss', '.jsx']\r\n    },\r\n    plugins: [\r\n        new OpenBrowserPlugin({url: 'http://localhost:6060/', browser: 'chrome'}),\r\n        new HtmlWebpackPlugin({\r\n            filename:'index.html',       //动态生成的html存放路径，相对于 path\r\n            template:'./src/index.html',        //生成的文件来源于\r\n            inject:true,                        //允许插件修改哪些内容，包括head与body\r\n            hash:true,                          //为静态资源生成hash值\r\n            minify:{                            //压缩HTML文件\r\n                removeComments:true,            //移除HTML中的注释\r\n                collapseWhitespace:false,        //删除空白符与换行符\r\n                removeRedundantAttributes:true,  //当值与默认值匹配时删除属性。\r\n                useShortDoctype:true,           //  doctype用短（HTML5）doctype 替换\r\n                removeEmptyAttributes:true,     //  删除所有带有空格值的属性\r\n                removeStyleLinkTypeAttributes:true,     //type=\"text/css\"从中移除style和link标记。其他type属性值保持不变\r\n                keepClosingSlash:true,          //  将尾部斜杠保留在单元素元素上\r\n                minifyJS:true,                  //  缩小脚本元素和事件属性中的JavaScript（使用UglifyJS）\r\n                minifyCSS:true,                 //  缩小样式元素和样式属性中的CSS（使用clean-css）\r\n                minifyURLs:true                 //  缩小各种属性中的URL（使用relateurl）\r\n            }\r\n        }),\r\n        //  按需加载， 将压缩文件分成多块\r\n        new webpack.optimize.CommonsChunkPlugin({\r\n            name: \"chunk\",\r\n            children: true,\r\n            minChunks:2,\r\n            async:true,\r\n        }),\r\n        new webpack.DefinePlugin({\r\n            \"process.env\": {\r\n                NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'production') // default value if not specified\r\n            }\r\n        }),\r\n        new ExtractTextPlugin('styles/[name].css'),\r\n    ],\r\n    postcss : [autoprefixer, csswring]\r\n\r\n}\r\n\r\n\r\n\r\n"]}